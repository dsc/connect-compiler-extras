fs   = require 'fs'
path = require 'path'

compiler = { register, Compiler, ExternalCompiler } = require 'connect-compiler'

# Export the connect-compiler exports
module.exports = exports = compiler


### helpers ###

flatten = -> it.reduce (a,b) -> [].concat a, b

class exports.CommonJSCompiler extends Compiler
    CJS_HEADER   : "require.install('{ID}', function(require, exports, module){\n\n"
    CJS_FOOTER   : "\n\n});\n"
    PAT_FULL_EXT : /\..*$/
    PAT_JS_EXT   : /(\.min)?\.mod(\.min)?\.js([?#].*)?$/i
    
    id           : 'commonjs'
    match        : /((?:\.min)?)\.mod((?:\.min)?)\.js$/i
    ext          : flatten <[ .js .co .coffee .jison ]>.map -> ['$1$2'+it, it]
    
    ext2wraps:
        co     : 'coco'
        coffee : 'coffee'
        jison  : 'jison'
    
    drop_full_ext   : true  # removes everything after the first dot in the basename, otherwise at most '.mod(.min)?.js'
    drop_pat        : null  # allows you to force a pattern to drop; otherwise determined by `drop_full_ext`.
    drop_path_parts : 0     # allows you to drop the mountpoint if your js files live in, say, /js
    
    
    -> super ...
    
    matches: (srcDir, pathname) ->
        src = path.join srcDir, pathname
        ( src.replace(@match, ext) for ext of @ext ) if @match.exec(pathname)
    
    # trim off .min if present
    # lookup: (src, destDir, pathname) ->
    #     path.join(destDir, pathname).replace(@match, '.mod.js')
    
    compileSync: (data) ->
        nfo = @info
        drop_parts = nfo.drop_path_parts ? @drop_path_parts
        drop_full  = nfo.drop_full_ext   ? @drop_full_ext
        drop_pat   = nfo.drop_pat or @drop_pat or (if drop_full then @PAT_FULL_EXT else @PAT_JS_EXT)
        
        mod_parts = nfo.url
            .slice 1
            .replace drop_pat, ''
            .split '/'
            .slice drop_parts
        mod_parts.pop() if mod_parts[mod_parts.length-1] is 'index'
        mod_id = path.normalize mod_parts.join('/')
        
        header = @CJS_HEADER.replace '{ID}', mod_id
        footer = @CJS_FOOTER.replace '{ID}', mod_id
        header+data+footer
    
    doCompile: (text, wrapped, cb) ->
        ext = /\.([^\.]+)$/.exec(@info.src)[1]
        @wraps = @ext2wraps[ext]
        super ...



/**
 * @class As CommonJSCompiler, but uses browserify's `require.define()` rather 
 *  than the included `require.install()`.
 */
class exports.CommonJSDefineCompiler extends CommonJSCompiler
    CJS_HEADER   : "require.define('/node_modules/{ID}.js', function(require, module, exports, __dirname, __filename){\n\n"
    id           : 'commonjs_define'
    -> super ...



/**
 * @class As CommonJSCompiler, but creates the module to comply with AMD's `define()`.
 */
class exports.AMDCompiler extends CommonJSCompiler
    CJS_HEADER   : "define('{ID}', function(require, module, exports){\n\n"
    CJS_FOOTER   : "\n\nreturn module.exports;\n});\n"
    PAT_JS_EXT   : /(\.min)?\.amd(\.min)?\.js([?#].*)?$/i
    
    id           : 'amd'
    match        : /((?:\.min)?)\.amd((?:\.min)?)\.js$/i
    -> super ...



class exports.PyYamlCompiler extends ExternalCompiler
    id          : 'pyyaml'
    match       : /\.json$/i
    ext         : '.yaml'
    
    # If https://github.com/dsc/py-lessly is installed, use the
    # ordered-dict YAML patch.
    YAML_TO_JSON = """
        try:
            import lessly.data.yaml_omap
        except ImportError:
            pass
        import sys, yaml, json
        json.dump(yaml.load(sys.stdin), sys.stdout)
    """
    
    YAML_TO_JSON : YAML_TO_JSON
    cmd          : "python -c '#YAML_TO_JSON'"
    
    -> super ...



# class exports.SassRubyCompiler extends ExternalCompiler
#     id          : 'sass_ruby'
#     match       : /\.css$/i
#     ext         : '.sass'
#     cmd         : 'sass --stdin --no-cache '
#     
#     -> super ...
#     preprocess: (cmd) ->
#         cmd += " --load-path='#{path.dirname(@info.src)}'"
#         cmd + (if @info.options.sass_ruby.load_path then " --load-path='#that'" else '')



# Register Compilers
for compiler of [ CommonJSCompiler, CommonJSDefineCompiler, AMDCompiler, PyYamlCompiler ]
    register compiler

